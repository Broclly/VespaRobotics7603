// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

import edu.wpi.first.wpilibj.TimedRobot;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj2.command.button.Trigger;
import edu.wpi.first.wpilibj.motorcontrol.Victor;
import edu.wpi.first.wpilibj2.command.*;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.cameraserver.CameraServer;
import java.lang.Math;
import java.lang.reflect.Method;
import java.util.function.Function;

public class Robot extends TimedRobot {
   public void pointAndShoot() {
    drive.tankDrive(newJoystick.getRawAxis(2), newJoystick.getRawAxis(5));
    double valX = newJoystick.getRawAxis(0);
    double valY = newJoystick.getRawAxis(1);
    double toTan = valX/valY;
    double tannedDegrees = Math.tan(toTan);
    double JoystickAngle = Math.toDegrees(tannedDegrees);
    double CurrentAngle = gyro.getAngle();
    drive.tankDrive(CurrentAngle + JoystickAngle, CurrentAngle - JoystickAngle);
  }

  private static final String d = null;
  double kp = 0.05;
  double a = 90.0;
  Victor driveLeftSpark = new Victor(3);
  Victor driveRightSpark = new Victor(2);
  Victor driveLeftVictor = new Victor(4);
  Victor driveRightVictor = new Victor(1);
  MotorControllerGroup leftMotors = new MotorControllerGroup(driveLeftSpark,driveLeftVictor);
  MotorControllerGroup rightMotors = new MotorControllerGroup(driveRightSpark,driveRightVictor);

  DifferentialDrive drive = new DifferentialDrive(leftMotors, rightMotors);


  Joystick newJoystick = new Joystick(0);
  ADXRS450_Gyro gyro = new ADXRS450_Gyro();
  Trigger AButton = new JoystickButton(newJoystick, 2);

  RunCommand TurnBy = new RunCommand(()-> 
  {double angle = gyro.getAngle();
  double error = a - angle;
  drive.tankDrive(kp * error, -(kp * error));
});

  @Override
  public void robotInit() {
    CameraServer.startAutomaticCapture();
    
  }

  @Override
  public void robotPeriodic() {}

  @Override
  public void autonomousInit() {}

  @Override
  public void autonomousPeriodic() {}

  @Override
  public void teleopInit() {AButton.onTrue(TurnBy);
    rightMotors.setInverted(true);
  }
  @Override
  public void teleopPeriodic() {
    pointAndShoot();
  }
  @Override
  public void disabledInit() {}

  @Override
  public void disabledPeriodic() {}

  @Override
  public void testInit() {}

  @Override
  public void testPeriodic() {}

  @Override
  public void simulationInit() {}

  @Override
  public void simulationPeriodic() {}
}
